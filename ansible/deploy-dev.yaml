# ansible playbook to set up some docker containers

- name: Deploy to dev node
  hosts: dev
  gather_facts: true
  vars:
    stack_name: "dev"
    image_tag: latest
    backend_port: 8080
    website_port: 3000
  tasks:
    - name: Create network
      community.docker.docker_network:
        name: "oasst-{{ stack_name }}"
        state: present
        driver: bridge

    - name: Create stack files directory
      ansible.builtin.file:
        path: "./{{ stack_name }}"
        state: directory

    - name: Copy redis.conf to managed node
      ansible.builtin.copy:
        src: ./redis.conf
        dest: "./{{ stack_name }}/redis.conf"

    - name: Set up Redis
      community.docker.docker_container:
        name: "oasst-{{ stack_name }}-redis"
        image: redis
        state: started
        restart_policy: always
        network_mode: "oasst-{{ stack_name }}"
        healthcheck:
          test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
          interval: 2s
          timeout: 2s
          retries: 10
        command: redis-server /usr/local/etc/redis/redis.conf
        volumes:
          - "./{{ stack_name }}/redis.conf:/usr/local/etc/redis/redis.conf"

    - name: Create postgres containers
      community.docker.docker_container:
        name: "oasst-{{ stack_name }}-postgres-{{ item.name }}"
        image: postgres:15
        state: started
        restart_policy: always
        network_mode: "oasst-{{ stack_name }}"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        healthcheck:
          test: ["CMD", "pg_isready", "-U", "postgres"]
          interval: 2s
          timeout: 2s
          retries: 10
      loop:
        - name: backend
        - name: web

    - name: Run the oasst oasst-backend
      community.docker.docker_container:
        name: "oasst-{{ stack_name }}-backend"
        image: "ghcr.io/laion-ai/open-assistant/oasst-backend:{{ image_tag }}"
        state: started
        recreate: true
        pull: true
        restart_policy: always
        network_mode: "oasst-{{ stack_name }}"
        env:
          POSTGRES_HOST: "oasst-{{ stack_name }}-postgres-backend"
          REDIS_HOST: "oasst-{{ stack_name }}-redis"
          DEBUG_ALLOW_ANY_API_KEY: "true"
          DEBUG_USE_SEED_DATA: "true"
          DEBUG_ALLOW_SELF_LABELING: "true"
          MAX_WORKERS: "1"
          RATE_LIMIT: "false"
          DEBUG_SKIP_EMBEDDING_COMPUTATION: "true"
          DEBUG_SKIP_TOXICITY_CALCULATION: "true"
        ports:
          - "{{ backend_port }}:8080"

    - name: Run the oasst oasst-web frontend
      community.docker.docker_container:
        name: "oasst-{{ stack_name }}-web"
        image: "ghcr.io/laion-ai/open-assistant/oasst-web:{{ image_tag }}"
        state: started
        recreate: true
        pull: true
        restart_policy: always
        network_mode: "oasst-{{ stack_name }}"
        env:
          ADMIN_USERS: "{{ lookup('ansible.builtin.env', 'WEB_ADMIN_USERS') }}"
          DATABASE_URL:
            "postgres://postgres:postgres@oasst-{{ stack_name
            }}-postgres-web/postgres"
          DEBUG_LOGIN: "true"
          DISCORD_CLIENT_ID:
            "{{ lookup('ansible.builtin.env', 'WEB_DISCORD_CLIENT_ID') }}"
          DISCORD_CLIENT_SECRET:
            "{{ lookup('ansible.builtin.env', 'WEB_DISCORD_CLIENT_SECRET') }}"
          EMAIL_FROM: open-assistent@laion.ai
          EMAIL_SERVER_HOST:
            "{{ lookup('ansible.builtin.env', 'WEB_EMAIL_SERVER_HOST') }}"
          EMAIL_SERVER_PASSWORD:
            "{{ lookup('ansible.builtin.env', 'WEB_EMAIL_SERVER_PASSWORD') }}"
          EMAIL_SERVER_PORT:
            "{{ lookup('ansible.builtin.env', 'WEB_EMAIL_SERVER_PORT') }}"
          EMAIL_SERVER_USER:
            "{{ lookup('ansible.builtin.env', 'WEB_EMAIL_SERVER_USER') }}"
          FASTAPI_URL: "http://oasst-{{ stack_name }}-backend:8080"
          FASTAPI_KEY: "1234"
          NEXTAUTH_SECRET:
            "{{ lookup('ansible.builtin.env', 'WEB_NEXTAUTH_SECRET') }}"
          NEXTAUTH_URL: http://web.{{ stack_name }}.open-assistant.io/
        ports:
          - "{{ website_port }}:3000"
        command: bash wait-for-postgres.sh node server.js
